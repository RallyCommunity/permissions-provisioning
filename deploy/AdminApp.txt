<!DOCTYPE html>
<html>
<head>
    <title>admin-permissions-provisioning</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Sep 16 2014 21:16:55 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Sep 16 2014 21:16:55 GMT-0600 (MDT)";
        var CHECKSUM = 18901257030;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.util.PreferenceSaving',{
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    PREF_CHUNK_LEN: 30000,
    findKeysAndCreateDate: function(prefix, workspace){
        this.logger.log( "findKeysAndLastModified", prefix );
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            model: 'Preference',
            fetch: ['Name','CreationDate'],
            limit: 'Infinity',
            context: {workspace: workspace},
            sorters: [ { property: 'Name', direction: 'ASC' } ],
            autoLoad: true,
            filters: [ { property: 'Name', operator: 'contains', value: prefix } ],
            listeners: {
                scope: this, 
                load: function(store,data,success) {
                    this.logger.log('findKeysAndLastModified load', success);
                    if (success) {
                        var pref_keys = {};
                        Ext.each(data, function(rec){
                            pref_keys[rec.get('Name')] = rec.get('CreationDate');
                        });
                        deferred.resolve(pref_keys);
                    } else {
                        deferred.reject();
                    }
                }
            }
        });
        return deferred.promise;        
    },
    saveAsJSON: function(name, object, workspace, appId, filterByUser, project){
        /*
         * This function does the following:
         * 1- Cleans up any existing preferences with this name
         * 2- Saves the object as JSON encoded preference.  
         * If the JSON encoded string is larger than the limit, then
         * the string is broken into pieces and saved.  
         * 3- Saves meta data (.lastupdate)
         * 
         */
        if (appId == undefined) {appId == null;}
        if (project == undefined) {project == null;}
        if (filterByUser == undefined) {filterByUser = false;}
        
        var deferred = Ext.create('Deft.Deferred');
        
        var pref_chunks = this._getJSONChunksFromObject(object);
        var prefs = {};
        Ext.each(pref_chunks, function(chunk, index){
            var pref_name = this._getPrefName(name,index);
            prefs[pref_name] = chunk;
        }, this);
        
        //remove old prefs for name....
        this._cleanPrefs(name, workspace, appId,filterByUser,project).then({
            scope: this,
            success: function(){
                this.logger.log('preferences cleaned, now saving new ones');
                this.save(prefs,workspace, appId,filterByUser,project).then({
                    scope: this,
                    success: function(){
                        deferred.resolve();
                    },
                    failure: function(error){
                        deferred.reject(error);
                    }
                });
            }, 
            failure: function(error){
                this.logger.log('failed to clean out preferences: ', error);
                deferred.reject('failed to clean out preferences: ', error);
            }
        });
        return deferred.promise; 
    },
    _cleanPrefs: function(prefix,workspace, appId,filterByUser,project){
        this.logger.log('_cleanPrefs');
        var deferred = Ext.create('Deft.Deferred');
        this._findPreferencesContainingKey(prefix, workspace).then({
            scope: this,
            success: function(records){
                this.logger.log('Destroying ' + records.length + ' records.');
                if (records.length > 0){
                    this._destroyRecords(records).then({
                        success: function(){
                            deferred.resolve(); 
                        }
                    });
                } else {
                    deferred.resolve();
                }
                
            },
            failure: function(){
                deferred.reject('Failed to find preferences with key ', prefix);
            }
        });
        return deferred.promise;
    },
    _getPrefName: function(name,suffix){
        return name.concat(".").concat(suffix.toString());
    },
    _getJSONChunksFromObject: function(object){
        var pref = Ext.JSON.encode(object);
        var pref_chunks = [];
        
        while (pref.length > this.PREF_CHUNK_LEN){
            pref_chunks.push(pref.substr(0,this.PREF_CHUNK_LEN));
            pref = pref.substr(this.PREF_CHUNK_LEN);
        }
        pref_chunks.push(pref);
        return pref_chunks;
    },
    _getObjectFromJSONChunks: function(json_chunks){
        var json_string = '';
        Ext.Array.each(json_chunks, function(chunk){
            json_string += chunk;
        });
        var obj = Ext.JSON.decode(json_string);
        return obj; 
    },
    _getPrefSuffix: function(name){
        var suffix = name.substr(name.lastIndexOf('.')+1);
        return suffix;  
    },
    _getPrefRoot: function(name){
        var root = name.substr(0, name.lastIndexOf('.'));
        return root;  
    },
    fetchFromJSON: function(name, workspace){
        var deferred = Ext.create('Deft.Deferred');
        //Returns an object retrieved from a JSON encoded preference.
        var json_chunks = new Ext.util.HashMap();
        var last_updated = new Ext.util.HashMap();
        this._findPreferencesContainingKey(name, workspace).then({
            scope:this,
            success: function(data){
                this.logger.log('fetchFromJSON Success.',data);
                //var json_chunks = [];
                //var last_updated = '';
                Ext.each(data, function(rec){
                    var key = this._getPrefRoot(rec.get('Name'));
                    if (!json_chunks.containsKey(key)){
                        json_chunks.add(key,[]);
                        last_updated.add(key,rec.get('CreationDate'));
                    }
                    var idx =  this._getPrefSuffix(rec.get('Name'));
                    var val = rec.get('Value');
                    this.logger.log('key:',key,' idx:',idx);
                    if (!isNaN(idx)){
                        json_chunks.get(key)[idx] = val;
                    } 
                },this);
                
                var objs = new Ext.util.HashMap();
                json_chunks.each(function(key,value,length){
                    objs.add(key,this._getObjectFromJSONChunks(value));
                },this);

                deferred.resolve([objs,last_updated]);
            },
            failure: function(error) {
                deferred.reject(error);
            }
        });
        return deferred.promise; 
    },
    save: function(prefs, workspace, appId, filterByUser, project){
        //Set defaults
        if (appId == undefined) {appId == null;}
        if (project == undefined) {project == null;}
        if (filterByUser == undefined) {filterByUser = false;}
        
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.PreferenceManager.update({
            appID: appId,
            project: project,
            workspace: workspace,
            filterByUser: filterByUser,
            settings: prefs,
            scope: this, 
            success: function() {
                this.logger.log('Successfully saved preference:',prefs);
                deferred.resolve();
            },
            failure: function(){
                this.logger.log('Failed to save preference',prefs);
                deferred.reject('Rally.data.PreferenceManager.update failed.');
            }
        });
        return deferred.promise;
    },
    _findPreferencesContainingKey: function( key_part, workspace ) {
        this.logger.log( "_findPreferencesContainingKey", key_part );
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            model: 'Preference',
            fetch: ['Name','Value','CreationDate'],
            limit: 'Infinity',
            context: {workspace: workspace},
            sorters: [ { property: 'Name', direction: 'ASC' } ],
            autoLoad: true,
            filters: [ { property: 'Name', operator: 'contains', value: key_part } ],
            listeners: {
                scope: this, 
                load: function(store,data,success) {
                    this.logger.log('_findPreferencesContainingKey load', success);
                    if (success) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject('Error loading WSAPI store.');
                    }
                }
            }
        });
        return deferred.promise;
    },
    _destroyRecords: function(records){
        var promises = [];
        var deferred = Ext.create('Deft.Deferred');
        Ext.each(records,function(rec){
            promises.push(this._destroyRecord(rec));
        }, this);
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(successes){
                deferred.resolve(successes);
                //TODO process to see if everything succeeeded
            }
        });
        return deferred.promise;
        
    },
    _destroyRecord: function(record){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('destroying ' + record.get('Name'));
        record.destroy({
            callback: function(records, operation, success){
                
                deferred.resolve(success); 
            }
        });
        return deferred.promise;
    }
});
/*
 * A series of utilities to help construct trees
 * with data gotten bottom or middle-up
 * 
 */
 
Ext.define('Rally.technicalservices.util.TreeBuilding', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    /*
     * Given a hash of models (key = object id) that all know what
     * their parent is (based on the "parent" field -- note lowercase)
     * Return an array of models that are at the root level and
     * have a "children" field (note lowercase)
     * with appropriate items in an array 
     */
    constructRootItems:function(item_hash) {
        var root_array = [];
        Ext.Object.each(item_hash, function(oid,item){
            if ( !item.get('children') ) { item.set('children',[]); }
            var direct_parent = item.get('parent');
            if (!direct_parent && !Ext.Array.contains(root_array,item)) {
                root_array.push(item);
            } else {
                
                var parent_oid =  direct_parent.ObjectID || direct_parent.get('ObjectID');
                if (!item_hash[parent_oid]) {
                    this.logger.log("Saved parent missing: ", parent_oid);
                    if ( !Ext.Array.contains(root_array,item) ) {
                        root_array.push(item);
                    }
                } else {
                    var parent = item_hash[parent_oid];
                    if ( !parent.get('children') ) { parent.set('children',[]); }
                    var kids = parent.get('children');
                    kids.push(item);
                    parent.set('children',kids);
                }
            }
        },this);
        return root_array;
    },
    /**
     * Given an array of models, turn them into hashes
     */
    convertModelsToHashes: function(model_array) {
        var hash_array = [];
        Ext.Array.each(model_array,function(model){
            if (this.isModel(model)) {
                var model_as_hash = model.getData();
                model_as_hash.expanded = false;
                model_as_hash.leaf = false;
                
                // children & parent are fields that are not a 
                // part of the model def'n so getData doesn't provide them
                if ( model.get('children') ) {
                    model_as_hash.children = this.convertModelsToHashes(model.get('children'));
                }
                if ( model.get('parent') ) {
                    if ( this.isModel(model.get('parent') ) ) {
                        model_as_hash.parent = model.get('parent').getData();
                    } else {
                        model_as_hash.parent = model.get('parent');
                    }
                }

                if (!model_as_hash.children || model_as_hash.children.length === 0 ) {
                    model_as_hash.leaf = true;
                }
                
                hash_array.push(model_as_hash);
            } else {
                hash_array.push(model);
            }
        },this);
        return hash_array;
    },
    isModel: function(model){
        return model && ( model instanceof Ext.data.Model );
    },
    /*
     * given an array of models, convert them into hashes only using select fields from the model
     * 
     */
    convertModelsToHashesLimitFields: function(models, fields){
        var hash_array = [];
        Ext.Array.each(models,function(model){
            if (this.isModel(model)) {
                var model_as_hash = this._transformModelToHash(model, fields);
                // children & parent are fields that are not a 
                // part of the model def'n so getData doesn't provide them
                if (model.get('ObjectID')){
                    model_as_hash.id = model.get('ObjectID');
                }
                if ( model.get('children') ) {
                    model_as_hash.children = this.convertModelsToHashesLimitFields(model.get('children'),fields);
                }
                if ( model.get('parent') ) {
                    if ( this.isModel(model.get('parent') ) ) {
                        model_as_hash.parent = this._transformModelToHash(model.get('parent'), fields); 
                    } else {
                        model_as_hash.parent = model.get('parent');
                    }
                }

                if (!model_as_hash.children || model_as_hash.children.length === 0 ) {
                    model_as_hash.leaf = true;
                }
                
                hash_array.push(model_as_hash);
            } else {
                hash_array.push(model);
            }
        },this);
        return hash_array;
    },
    _transformModelToHash: function(model, fields){
        var model_as_hash = {};
        model_as_hash.expanded = false;
        model_as_hash.leaf = false;
        Ext.each(fields, function(field){
            model_as_hash[field] = model.get(field);
        });
        return model_as_hash; 
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

Ext.define('Rally.technicalservices.TSRequestedPermission',{
    extend: 'Ext.data.Model',
    fields: [
             {name: 'permission', type:'string', defaultValue: 'Editor'},
             {name: 'userid', type: 'int'},
             {name: 'username', type: 'string'},
             {name: 'projectpath', type: 'string'},
             {name: 'projectid', type: 'int'},
             {name: 'team_member',type:'Boolean'}
             ],
    getPrefKey: function(wksp_id){
        return Rally.technicalservices.TSRequestedPermission.getUserPrefKey(wksp_id, this.get('userid')) + 'project.' + this.get('projectid');
    },
    getPrefValue: function(){
        return this.getData();
    },
    statics: {
        
        getPrefPrefixUser: function(wksp_id){
            var PREF_PREFIX_USER = 'permissions.provisioning.user.'; 
            return wksp_id.toString() + PREF_PREFIX_USER;
        },
        getUserPrefKey: function(wksp_id, userid){
            return this.getPrefPrefixUser(wksp_id) + userid.toString() + '.';
        },
        isValidPrefKey: function(pref_key){
            var regex = new RegExp(this.getPrefPrefixUser('').replace('.','\.') + '([0-9]+)\.project\.([0-9]+)', 'i');
            var pref_matches = pref_key.match(regex);
            if (pref_matches){
                //make sure ids > 0 
                if (pref_matches[1] > 0 && pref_matches[2]>0){
                    return true;
                };
            }
            return false;
        }
    }
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    PREF_NAME: 'permissions.provisioning.projecttree',
    USER_PREF_NAME: 'permissions.provisioning.user',
    items: [
        {xtype:'container',itemId:'display_box', layout: 'hbox', padding: 25},
        {xtype:'container',itemId: 'requested_permissions_box'},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this.down('#display_box').add({
            itemId: 'button_build_projects',
            xtype: 'button',
            text: 'Refresh Projects',
            scope: this,
            margin: 10,
            handler: this._refreshProjectTreePreferences
        });
        
        this._updateProjectTreeStatus();

        this._createPendingPermissionsGrid();
    },
    _getPrefName: function(){
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        return wksp_id.toString() + this.PREF_NAME;  
    },
    _getUserPrefName: function(){
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        return wksp_id.toString() + this.USER_PREF_NAME;  
    },
    _getRequestedPermissionColumns: function(){
        this.logger.log('_getRequestedPermissionColumns');
       
        var columns = [{ //username
                text: 'UserName',
                dataIndex: 'username',
                renderer: function(value, metaData, record){
                    return '<a href="/slm/user/edit.sp?oid=' + record.get('userid') + '" target="_blank">' + value + '</a>'; 
                } 
            },{//project 
                text: 'Project Path',
                dataIndex: 'projectpath',
                flex: 1
            },{
              text: 'Team Member?',
              dataIndex: 'team_member',
              renderer: function(v){
                  if (v) {return 'Yes';}
                  return 'No';
              }
            },{//Permission
                dataIndex: 'permission',
                text: 'Requested Permission',
            },{ //Action Column (dismiss)
                        scope: this,
                        xtype:'actioncolumn',
                        items: [{
                            icon: '/slm/images/icon_delete.gif',
                            tooltip: 'Dismiss',
                            scope: this,
                            handler: this._dismissRequest
                        }],
            }];
        return columns;        
    },
    
    _dismissRequest: function(grid, row_index, col_index){
        var perm = grid.getStore().getAt(row_index);
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        this.logger.log('_dismissRequest:', perm, this);
        Rally.technicalservices.util.PreferenceSaving._cleanPrefs(perm.getPrefKey(wksp_id),this.getContext().getWorkspaceRef()).then({
            scope:this,
            success: function(){
                this._createPendingPermissionsGrid();
            },
            failure: function(error){
                alert(error);
            }
        });
    },
       _createPendingPermissionsGrid: function(){
           if (this.down('#requested-permissions-grid')){
               this.down('#requested-permissions-grid').destroy();
           }
           
           this._createPendingPermissionsStore().then({
            scope: this,
            success: function(store){
                this.down('#requested_permissions_box').add({
                    xtype:'rallygrid',
                    itemId: 'requested-permissions-grid',
                    title: 'Pending User Project Permission Requests',
                    store: store,
                    scope: this,
                    columnCfgs: this._getRequestedPermissionColumns(),
                    showPagingToolbar: false,
                    width: 800
                    
                });
            },
            failure: function(error){
                alert(error);
            }
        });
    },
    _createPendingPermissionsStore: function(){
        var workspace = this.getContext().getWorkspaceRef();
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.technicalservices.util.PreferenceSaving.fetchFromJSON(Rally.technicalservices.TSRequestedPermission.getPrefPrefixUser(wksp_id),workspace).then({
            scope: this,
            success: function(obj){
                var requests = obj[0].getKeys();
                var data = [];
                Ext.each(requests, function(req_key){
                   if (Rally.technicalservices.TSRequestedPermission.isValidPrefKey(req_key)){
                       data.push(obj[0].get(req_key));
                   }
                }, this);

                var store = Ext.create('Rally.data.custom.Store',{
                    model: 'Rally.technicalservices.TSRequestedPermission',
                    data: data,
                    limit: 'infinity'
                });
                deferred.resolve(store);
            },
            failure: function(error){
                deferred.reject(error);
            }
        });
        return deferred.promise; 
    },
    _refreshProjectTreePreferences: function(){
        var me = this; 
        this.down('#button_build_projects').setDisabled(true);
        this.down('#display_box').setLoading({msg: 'Generating Project tree...'})
        var workspace = this.getContext().getWorkspaceRef();
        this._fetchProjectTree().then({
            scope: this,
            success: function(tree){
                Rally.technicalservices.util.PreferenceSaving.saveAsJSON(this._getPrefName(),tree,workspace).then({
                    scope: this,
                    success: function(){
                        Rally.ui.notify.Notifier.show({message: 'Project Tree Saved.'});
                    },
                    failure: function(error){
                        Rally.ui.notify.Notifier.showError({message: error});
                    }
                });
            },
            failure: function(error){
                Rally.ui.notify.Notifier.showError({message: error});
           }
        }).always(function(){
            me.down('#display_box').setLoading(false);
            me.down('#button_build_projects').setDisabled(false);
            me._updateProjectTreeStatus(true);
        });
         
    },
    _fetchProjectTree: function(){
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'Project',
            fetch: ['Name','ObjectID','Parent','Children','Owner','FirstName','LastName','EmailAddress'],
            limit: Infinity,
            autoLoad: true,
            context: {project: null},
            listeners: {
                scope: this, 
                load: function(store, records, successful){
                    this.logger.log('_fetchProjectTree success', successful);
                    if (successful){
                        var fields = ['Name','Owner'];
                        var flattened_project_hash = this._createProjectModelHash(records);  
                        var project_tree = Rally.technicalservices.util.TreeBuilding.constructRootItems(flattened_project_hash);
                        var project_tree_hash = Rally.technicalservices.util.TreeBuilding.convertModelsToHashesLimitFields(project_tree, fields);
                        deferred.resolve(project_tree_hash);
                    } else {
                        deferred.reject('Error loading projects');
                    }
                }
            }
       });
       return deferred.promise;
    },
    _createProjectModelHash: function(records){
        var project_hash = {};
        Ext.Array.each(records, function(rec){
            var parent = rec.get('Parent');
            rec.set('parent',parent);
            project_hash[rec.get('ObjectID')] = rec;
            var owner_obj = rec.get('Owner');
            var owner = '';
            if (owner_obj){
                if (owner_obj.FirstName){
                    owner += owner_obj.FirstName + ' ';
                }
                if (owner_obj.LastName){
                    owner += owner_obj.LastName + ' ';
                }
                owner += owner_obj.EmailAddress;
            }
            rec.set('Owner',owner);
         }, this);
        return project_hash;
    },  
    _updateProjectTreeStatus: function(just_updated){
        var html ='';
        if (this.down('#text-area-project-tree-status')){
            this.down('#text-area-project-tree-status').destroy();
        }
        var status =  this.down('#display_box').add({
            itemId: 'text-area-project-tree-status',
            xtype: 'container',
            html: html
        });
        var me = this; 
        if (just_updated){
            html = '';
            status.update(html);
        } else {
            this.down('#display_box').setLoading(true);
            Rally.technicalservices.util.PreferenceSaving.findKeysAndCreateDate(this._getPrefName(), this.getContext().getWorkspaceRef()).then({
                scope: this,
                success: function(key_hash_map){
                    if (Object.keys(key_hash_map).length>0){
                        last_updated = _.values(key_hash_map)[0];
                        html = 'The project tree was last updated on ' + last_updated;
                    } else {
                        html = 'The project tree has not yet been created.  Please click <b>Refresh Projects</b> to build the project tree for the user permissions provisioning app.';
                        var cls = 'cls-error';
                        status.addCls(cls); 
                   }
                },
                failure: function(error){
                    this.logger.log('findKeysAndCreateDate',error);
                    html = 'Error creating the project tree structure: ' + error;
                    var cls = 'cls-error';
                    status.addCls(cls); 
                }
            }).always(function(){
                status.update(html);
                me.down('#display_box').setLoading(false);
            });
        }
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'admin-permissions-provisioning'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.cls-error{
    color: #FF0000
}
.request-button {
    text-align: center;
    color: #000000;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
}

    </style>

</head>
<body></body>
</html>