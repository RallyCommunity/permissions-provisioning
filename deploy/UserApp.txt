<!DOCTYPE html>
<html>
<head>
    <title>user-permissions-provisioning</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Sep 16 2014 21:15:12 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Sep 16 2014 21:15:12 GMT-0600 (MDT)";
        var CHECKSUM = 28399330315;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.util.PreferenceSaving',{
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    PREF_CHUNK_LEN: 30000,
    findKeysAndCreateDate: function(prefix, workspace){
        this.logger.log( "findKeysAndLastModified", prefix );
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            model: 'Preference',
            fetch: ['Name','CreationDate'],
            limit: 'Infinity',
            context: {workspace: workspace},
            sorters: [ { property: 'Name', direction: 'ASC' } ],
            autoLoad: true,
            filters: [ { property: 'Name', operator: 'contains', value: prefix } ],
            listeners: {
                scope: this, 
                load: function(store,data,success) {
                    this.logger.log('findKeysAndLastModified load', success);
                    if (success) {
                        var pref_keys = {};
                        Ext.each(data, function(rec){
                            pref_keys[rec.get('Name')] = rec.get('CreationDate');
                        });
                        deferred.resolve(pref_keys);
                    } else {
                        deferred.reject();
                    }
                }
            }
        });
        return deferred.promise;        
    },
    saveAsJSON: function(name, object, workspace, appId, filterByUser, project){
        /*
         * This function does the following:
         * 1- Cleans up any existing preferences with this name
         * 2- Saves the object as JSON encoded preference.  
         * If the JSON encoded string is larger than the limit, then
         * the string is broken into pieces and saved.  
         * 3- Saves meta data (.lastupdate)
         * 
         */
        if (appId == undefined) {appId == null;}
        if (project == undefined) {project == null;}
        if (filterByUser == undefined) {filterByUser = false;}
        
        var deferred = Ext.create('Deft.Deferred');
        
        var pref_chunks = this._getJSONChunksFromObject(object);
        var prefs = {};
        Ext.each(pref_chunks, function(chunk, index){
            var pref_name = this._getPrefName(name,index);
            prefs[pref_name] = chunk;
        }, this);
        
        //remove old prefs for name....
        this._cleanPrefs(name, workspace, appId,filterByUser,project).then({
            scope: this,
            success: function(){
                this.logger.log('preferences cleaned, now saving new ones');
                this.save(prefs,workspace, appId,filterByUser,project).then({
                    scope: this,
                    success: function(){
                        deferred.resolve();
                    },
                    failure: function(error){
                        deferred.reject(error);
                    }
                });
            }, 
            failure: function(error){
                this.logger.log('failed to clean out preferences: ', error);
                deferred.reject('failed to clean out preferences: ', error);
            }
        });
        return deferred.promise; 
    },
    _cleanPrefs: function(prefix,workspace, appId,filterByUser,project){
        this.logger.log('_cleanPrefs');
        var deferred = Ext.create('Deft.Deferred');
        this._findPreferencesContainingKey(prefix, workspace).then({
            scope: this,
            success: function(records){
                this.logger.log('Destroying ' + records.length + ' records.');
                if (records.length > 0){
                    this._destroyRecords(records).then({
                        success: function(){
                            deferred.resolve(); 
                        }
                    });
                } else {
                    deferred.resolve();
                }
                
            },
            failure: function(){
                deferred.reject('Failed to find preferences with key ', prefix);
            }
        });
        return deferred.promise;
    },
    _getPrefName: function(name,suffix){
        return name.concat(".").concat(suffix.toString());
    },
    _getJSONChunksFromObject: function(object){
        var pref = Ext.JSON.encode(object);
        var pref_chunks = [];
        
        while (pref.length > this.PREF_CHUNK_LEN){
            pref_chunks.push(pref.substr(0,this.PREF_CHUNK_LEN));
            pref = pref.substr(this.PREF_CHUNK_LEN);
        }
        pref_chunks.push(pref);
        return pref_chunks;
    },
    _getObjectFromJSONChunks: function(json_chunks){
        var json_string = '';
        Ext.Array.each(json_chunks, function(chunk){
            json_string += chunk;
        });
        var obj = Ext.JSON.decode(json_string);
        return obj; 
    },
    _getPrefSuffix: function(name){
        var suffix = name.substr(name.lastIndexOf('.')+1);
        return suffix;  
    },
    _getPrefRoot: function(name){
        var root = name.substr(0, name.lastIndexOf('.'));
        return root;  
    },
    fetchFromJSON: function(name, workspace){
        var deferred = Ext.create('Deft.Deferred');
        //Returns an object retrieved from a JSON encoded preference.
        var json_chunks = new Ext.util.HashMap();
        var last_updated = new Ext.util.HashMap();
        this._findPreferencesContainingKey(name, workspace).then({
            scope:this,
            success: function(data){
                this.logger.log('fetchFromJSON Success.',data);
                //var json_chunks = [];
                //var last_updated = '';
                Ext.each(data, function(rec){
                    var key = this._getPrefRoot(rec.get('Name'));
                    if (!json_chunks.containsKey(key)){
                        json_chunks.add(key,[]);
                        last_updated.add(key,rec.get('CreationDate'));
                    }
                    var idx =  this._getPrefSuffix(rec.get('Name'));
                    var val = rec.get('Value');
                    this.logger.log('key:',key,' idx:',idx);
                    if (!isNaN(idx)){
                        json_chunks.get(key)[idx] = val;
                    } 
                },this);
                
                var objs = new Ext.util.HashMap();
                json_chunks.each(function(key,value,length){
                    objs.add(key,this._getObjectFromJSONChunks(value));
                },this);

                deferred.resolve([objs,last_updated]);
            },
            failure: function(error) {
                deferred.reject(error);
            }
        });
        return deferred.promise; 
    },
    save: function(prefs, workspace, appId, filterByUser, project){
        //Set defaults
        if (appId == undefined) {appId == null;}
        if (project == undefined) {project == null;}
        if (filterByUser == undefined) {filterByUser = false;}
        
        var deferred = Ext.create('Deft.Deferred');
        
        Rally.data.PreferenceManager.update({
            appID: appId,
            project: project,
            workspace: workspace,
            filterByUser: filterByUser,
            settings: prefs,
            scope: this, 
            success: function() {
                this.logger.log('Successfully saved preference:',prefs);
                deferred.resolve();
            },
            failure: function(){
                this.logger.log('Failed to save preference',prefs);
                deferred.reject('Rally.data.PreferenceManager.update failed.');
            }
        });
        return deferred.promise;
    },
    _findPreferencesContainingKey: function( key_part, workspace ) {
        this.logger.log( "_findPreferencesContainingKey", key_part );
        var deferred = Ext.create('Deft.Deferred');
        Ext.create('Rally.data.wsapi.Store', {
            model: 'Preference',
            fetch: ['Name','Value','CreationDate'],
            limit: 'Infinity',
            context: {workspace: workspace},
            sorters: [ { property: 'Name', direction: 'ASC' } ],
            autoLoad: true,
            filters: [ { property: 'Name', operator: 'contains', value: key_part } ],
            listeners: {
                scope: this, 
                load: function(store,data,success) {
                    this.logger.log('_findPreferencesContainingKey load', success);
                    if (success) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject('Error loading WSAPI store.');
                    }
                }
            }
        });
        return deferred.promise;
    },
    _destroyRecords: function(records){
        var promises = [];
        var deferred = Ext.create('Deft.Deferred');
        Ext.each(records,function(rec){
            promises.push(this._destroyRecord(rec));
        }, this);
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(successes){
                deferred.resolve(successes);
                //TODO process to see if everything succeeeded
            }
        });
        return deferred.promise;
        
    },
    _destroyRecord: function(record){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('destroying ' + record.get('Name'));
        record.destroy({
            callback: function(records, operation, success){
                
                deferred.resolve(success); 
            }
        });
        return deferred.promise;
    }
});
/*
 * A series of utilities to help construct trees
 * with data gotten bottom or middle-up
 * 
 */
 
Ext.define('Rally.technicalservices.util.TreeBuilding', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    /*
     * Given a hash of models (key = object id) that all know what
     * their parent is (based on the "parent" field -- note lowercase)
     * Return an array of models that are at the root level and
     * have a "children" field (note lowercase)
     * with appropriate items in an array 
     */
    constructRootItems:function(item_hash) {
        var root_array = [];
        Ext.Object.each(item_hash, function(oid,item){
            if ( !item.get('children') ) { item.set('children',[]); }
            var direct_parent = item.get('parent');
            if (!direct_parent && !Ext.Array.contains(root_array,item)) {
                root_array.push(item);
            } else {
                
                var parent_oid =  direct_parent.ObjectID || direct_parent.get('ObjectID');
                if (!item_hash[parent_oid]) {
                    this.logger.log("Saved parent missing: ", parent_oid);
                    if ( !Ext.Array.contains(root_array,item) ) {
                        root_array.push(item);
                    }
                } else {
                    var parent = item_hash[parent_oid];
                    if ( !parent.get('children') ) { parent.set('children',[]); }
                    var kids = parent.get('children');
                    kids.push(item);
                    parent.set('children',kids);
                }
            }
        },this);
        return root_array;
    },
    /**
     * Given an array of models, turn them into hashes
     */
    convertModelsToHashes: function(model_array) {
        var hash_array = [];
        Ext.Array.each(model_array,function(model){
            if (this.isModel(model)) {
                var model_as_hash = model.getData();
                model_as_hash.expanded = false;
                model_as_hash.leaf = false;
                
                // children & parent are fields that are not a 
                // part of the model def'n so getData doesn't provide them
                if ( model.get('children') ) {
                    model_as_hash.children = this.convertModelsToHashes(model.get('children'));
                }
                if ( model.get('parent') ) {
                    if ( this.isModel(model.get('parent') ) ) {
                        model_as_hash.parent = model.get('parent').getData();
                    } else {
                        model_as_hash.parent = model.get('parent');
                    }
                }

                if (!model_as_hash.children || model_as_hash.children.length === 0 ) {
                    model_as_hash.leaf = true;
                }
                
                hash_array.push(model_as_hash);
            } else {
                hash_array.push(model);
            }
        },this);
        return hash_array;
    },
    isModel: function(model){
        return model && ( model instanceof Ext.data.Model );
    },
    /*
     * given an array of models, convert them into hashes only using select fields from the model
     * 
     */
    convertModelsToHashesLimitFields: function(models, fields){
        var hash_array = [];
        Ext.Array.each(models,function(model){
            if (this.isModel(model)) {
                var model_as_hash = this._transformModelToHash(model, fields);
                // children & parent are fields that are not a 
                // part of the model def'n so getData doesn't provide them
                if (model.get('ObjectID')){
                    model_as_hash.id = model.get('ObjectID');
                }
                if ( model.get('children') ) {
                    model_as_hash.children = this.convertModelsToHashesLimitFields(model.get('children'),fields);
                }
                if ( model.get('parent') ) {
                    if ( this.isModel(model.get('parent') ) ) {
                        model_as_hash.parent = this._transformModelToHash(model.get('parent'), fields); 
                    } else {
                        model_as_hash.parent = model.get('parent');
                    }
                }

                if (!model_as_hash.children || model_as_hash.children.length === 0 ) {
                    model_as_hash.leaf = true;
                }
                
                hash_array.push(model_as_hash);
            } else {
                hash_array.push(model);
            }
        },this);
        return hash_array;
    },
    _transformModelToHash: function(model, fields){
        var model_as_hash = {};
        model_as_hash.expanded = false;
        model_as_hash.leaf = false;
        Ext.each(fields, function(field){
            model_as_hash[field] = model.get(field);
        });
        return model_as_hash; 
    }
});
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

Ext.define('Rally.technicalservices.TSRequestedPermission',{
    extend: 'Ext.data.Model',
    fields: [
             {name: 'permission', type:'string', defaultValue: 'Editor'},
             {name: 'userid', type: 'int'},
             {name: 'username', type: 'string'},
             {name: 'projectpath', type: 'string'},
             {name: 'projectid', type: 'int'},
             {name: 'team_member',type:'Boolean'}
             ],
    getPrefKey: function(wksp_id){
        return Rally.technicalservices.TSRequestedPermission.getUserPrefKey(wksp_id, this.get('userid')) + 'project.' + this.get('projectid');
    },
    getPrefValue: function(){
        return this.getData();
    },
    statics: {
        
        getPrefPrefixUser: function(wksp_id){
            var PREF_PREFIX_USER = 'permissions.provisioning.user.'; 
            return wksp_id.toString() + PREF_PREFIX_USER;
        },
        getUserPrefKey: function(wksp_id, userid){
            return this.getPrefPrefixUser(wksp_id) + userid.toString() + '.';
        },
        isValidPrefKey: function(pref_key){
            var regex = new RegExp(this.getPrefPrefixUser('').replace('.','\.') + '([0-9]+)\.project\.([0-9]+)', 'i');
            var pref_matches = pref_key.match(regex);
            if (pref_matches){
                //make sure ids > 0 
                if (pref_matches[1] > 0 && pref_matches[2]>0){
                    return true;
                };
            }
            return false;
        }
    }
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    PREF_NAME: 'permissions.provisioning.projecttree',
    USER_PREF_PREFIX: 'permissions.provisioning.user.',
    filter_string: '',
    items: [
        {xtype: 'container', itemId: 'requested_permissions_box', layout: 'vbox', padding: 10},
        {xtype: 'container', itemId: 'display_box', padding: 10},
        {xtype: 'container', itemId: 'search_box', layout: 'hbox'},
        {xtype: 'container', itemId: 'search_results_box'},
        {xtype: 'tsinfolink'}
    ],
    launch: function() {
        //Get the project tree.  If we don't have this, then this app is useless!  
        var me = this;
        this.setLoading({msg: 'Loading Project Tree...'});
        Rally.technicalservices.util.PreferenceSaving.fetchFromJSON(this._getPrefName(), this.getContext().getWorkspaceRef()).then({
            scope: this, 
            success: this._addAppComponents,
            failure: this._notifyUserOfError
        }).always(function(){
            me.setLoading(false);
        });
    },
    _getPrefName: function(){
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        return wksp_id.toString() + this.PREF_NAME;  
    },
    _getUserPrefName: function(){
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        return wksp_id.toString() + this.USER_PREF_PREFIX;  
    },
    _addAppComponents: function(obj){
        //TODO: Handle the case where there is no project tree.  
        this.logger.log('_addAppComponents', obj);
        var tree_obj = obj[0].get(this._getPrefName());
        var last_updated = obj[1].get(this._getPrefName());
        this.logger.log('_addAppComponents',obj, tree_obj,last_updated);
        
        
        //Create the internal project tree that we will search  
        this.project_selector = this._createTreeStore(this._getProjectTreeModelFields(),'TSProjectTreeStore',tree_obj);
        
        this._refreshRequestedPermissions(); // creates the grid where we will display the permissions requested by the user
        
        var html ='To request permissions, search for the project (by Project Name or Project Owner) for which you would like permissions and request either Viewer, Editor or Administrator permissions.';
        if (this.down('#text-area-project-tree-status')){
            this.down('#text-area-project-tree-status').destroy();
        }
        var status =  this.down('#display_box').add({
            itemId: 'text-area-project-tree-status',
            xtype: 'container',
            html: html
        });
        var me = this; 
        if (last_updated){
            html = html + '\n\nThe available project list was last updated on ' + last_updated + '.';
            this._createSearchBox();  //Sets up the components for searching by project name or owner
        } else {
            html = 'The project tree has not yet been created.  Please contact your Rally Administrator to generate the list of available projects.';
            var cls = 'cls-error';
            status.addCls(cls); 
        }
        status.update(html);
        

    },
    _createSearchResults: function(results){
        this.down('#search_results_box').removeAll();
        
        var store = Ext.create('Ext.data.Store',{
            fields: ['projectpath','projectid','owner'],
            //limit: 'infinity',
            pageSize: 10,
            data: results
        });
        this.down('#search_results_box').add({
            xtype: 'rallygrid',
            itemId: 'search-results-grid',
            store: store,
          //  selType: 'rowmodel',
          //  plugins: this._getPlugins(),
            width: this._getGridWidth(),  //Set to just less than document.width
            columnCfgs: this._getSearchResultsColumns(),
            showPagingToolbar: false //This needs to be off since its local data
        });
    },
    _getSearchResultsColumns: function(){
        this.logger.log('_getSearchResultsColumns');
        var me = this;
        var permission_types = ['Viewer','Editor','Admin'];
        var columns = [{
                text:'Project Path', 
                dataIndex:'projectpath', 
                flex: 1
        },{
            text:'Project Owner', 
            dataIndex:'owner', 
        },{
            text: 'Team Member?',
            dataIndex: 'team_member',
            xtype: 'checkcolumn'    
        },{
            width: 75,   
            renderer: function (v, m, rec, row, col) {
                var id = Ext.id();
                Ext.defer(function () {
                    Ext.widget('button', {
                        renderTo: id,
                        text: 'Viewer',
                        scope: this,
                        cls: 'request-button',
                        handler: function () {
                            me._addRequestedPermission(rec, row, 'Viewer', me);
                        }
                    });
                }, 50, this);
            return Ext.String.format('<div id="{0}"></div>', id);
            }
        },{
            width: 75,    
            renderer: function (v, m, rec, row, col) {
                    var id = Ext.id();
                    Ext.defer(function () {
                        Ext.widget('button', {
                            renderTo: id,
                            text: 'Editor',
                            scope: this,
                            cls: 'request-button',
                            handler: function () {
                                me._addRequestedPermission(rec, row, 'Editor', me);
                            }
                        });
                    }, 50, this);
                return Ext.String.format('<div id="{0}"></div>', id);
                }
        },{
            width: 75,    
                    renderer: function (v, m, rec, row, col) {
                        var id = Ext.id();
                        Ext.defer(function () {
                            Ext.widget('button', {
                                renderTo: id,
                                text: 'Admin',
                                scope: this,
                                cls: 'request-button',
                                handler: function () {
                                    me._addRequestedPermission(rec, row, 'Admin', me);
                                }
                            });
                        }, 50, this);
                    return Ext.String.format('<div id="{0}"></div>', id);
                    }
                }];
        return columns;        
    },

    _addRequestedPermission: function(rec, row,type, me){
        me.logger.log('_addRequestedPermission', row, type);
        rec.get('team_member')
        var user = this.getContext().getUser();
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        var project = this.getContext().getProjectRef();
        var permission = Ext.create('Rally.technicalservices.TSRequestedPermission');
        permission.set('projectid',rec.get('projectid'));
        permission.set('projectpath',rec.get('projectpath'))
        permission.set('userid',user.ObjectID);
        permission.set('username',user.UserName);
        permission.set('permission',type);
        permission.set('team_member', rec.get('team_member'));
        Rally.technicalservices.util.PreferenceSaving.saveAsJSON(permission.getPrefKey(wksp_id), permission.getPrefValue(), me.getContext().getWorkspaceRef(),undefined,true).then({
            scope: this,
            success: function(){
                Rally.ui.notify.Notifier.show({message: type + ' permission submitted for ' + user.UserName + ' for project' + rec.get('projectpath')});
                me._refreshRequestedPermissions();
            },
            failure: function(error){
                me._notifyUserOfError(error);
            }
        });
    },
    _nofityUserOfError: function(error){
        Rally.ui.notify.Notifier.showError({message: error});
    },
    /* 
     * ProjectSelector:  The following functions are specific to the tree for searching for a project
     */
    _getProjectTreeModelFields: function(){
        return [
            {name: 'Name', type: 'String'},
            {name: 'Owner', type: 'String'}
        ];
    },
    _generateTypeAheadStore: function(search_field){
        this.logger.log('_generateTypeAheadStore', search_field);
        //generate an array of all project names
        var search_terms = [];
        var project_count = 0;
        this.project_selector.getRootNode().cascadeBy(function(nd){
            project_count++;
            var val = nd.get(search_field);
            if (val.length > 1 && !Ext.Array.contains(search_terms, val)){
                search_terms.push(val);
                var tokens = val.match(/\S+/g);
                if (tokens.length > 1){
                    search_terms = _.union(search_terms,tokens);
                }
            }
            search_terms.sort();
        });
        this.logger.log('_generateTypeAheadStore END', project_count);
        return search_terms;
    },
    _createTreeStore: function(model_fields, model_name, children){
        var model = {
                extend: 'Ext.data.Model',
                fields: model_fields
            };
        Ext.define(model_name, model);        
        
        var tree_store = Ext.create('Ext.data.TreeStore',{
            model: model_name,
            root: {
                expanded: false,
                children: children
                }
        });
        return tree_store;
    },

    _searchTree: function(){
        var search_field = this.down('#search-by-combo').getValue();
        var search_term = this.down('#search-combo').getValue();
        var root = this.project_selector.getRootNode();
        var search_regex = new RegExp(search_term,'gi');
        search_results = []; 
        root.cascadeBy(function(n){
            var match_term = n.get(search_field); 
            if (search_field == 'Name'){
                match_term = n.getPath(search_field)
            }
            if (match_term.match(search_regex)){
                var result = {};
                result['projectpath'] = n.getPath('Name');
                result['projectid'] = n.get('id');
                result['owner'] = n.get('Owner');
                search_results.push(result);
            }
            return true;
        });
        this._createSearchResults(search_results);
    },
    _addSearchWidgets: function(cb){
        var search_field = cb.getValue();
        var type_ahead_store = this._generateTypeAheadStore(search_field);
        
        if (this.down('#search-combo')){this.down('#search-combo').destroy();}
        if (this.down('#search-button')){this.down('#search-button').destroy();}

        this.down('#search_box').add({
            xtype: 'combobox',
            itemId: 'search-combo',
            typeAhead: true,
            store: type_ahead_store,
            hideTrigger: true,
            enableKeyEvents: true,
            margin: 10,
            minChars: 2,
            width: 300
        });
        this.down('#search_box').add({
            xtype: 'button',
            itemId: 'search-button',
            text: 'Search',
            margin: 10,
            scope: this,
            handler: this._searchTree
        });
    },
    _createSearchBox: function(){
        this.logger.log ('_createSearchBox');
        var search_store = Ext.create('Ext.data.Store', {
            fields: ['display','field_name'],
            data: [{display:'Project Name', field_name:'Name'},
                   {display:'Owner Name or Email', field_name:'Owner'}]  //TODO if we want to search by otherfields, this is where we will set that up.  

        });        
        
        this.down('#search_box').add({
            xtype: 'combobox',
            itemId: 'search-by-combo',
            store: search_store,
            displayField: 'display',
            valueField: 'field_name',
            margin: 10,
            labelAlign: 'right',
            fieldLabel: 'Search By',
            forceSelection: true,
            listeners: {
                scope: this,
                change: function(cb) {
                    this._addSearchWidgets(cb);
                }
            }
        });
        this.down('#search-by-combo').setValue('Name');
    },
    /*
     * RequestedPermissions:  The following functions are specific to the tree for requested permissions
     */
    _getRequestedPermissionColumns: function(){
        this.logger.log('_getRequestedPermissionColumns');

        var columns = [
            { //Project Path 
                text: 'Project Path',
                dataIndex: 'projectpath',
                flex: 1
            },
            { //Requested Permission
                text: 'Requested Permission',
                dataIndex: 'permission',
            },{ //Team Member (True or False)
                text: 'Team Member?',
                dataIndex: 'team_member',
                renderer: function(v){
                    if (v) {
                        return 'Yes';
                    }
                    return 'No';
                }
            },{ //Action Column
                xtype:'actioncolumn',
                items: [{
                    icon: '/slm/images/icon_delete.gif',
                    tooltip: 'Delete',
                    scope: this,
                    handler: this._deleteRequestedPermission
                }]
            }]
        return columns;        
    },
    _deleteRequestedPermission: function(grid,row,col){
        var perm = grid.getStore().getAt(row);
        var wksp_id = this.getContext().getWorkspace().ObjectID;
       // var project_ref = this.getContext().getProjectRef();
        this.logger.log('_deleteRequestedPermission:', perm);
        Rally.technicalservices.util.PreferenceSaving._cleanPrefs(perm.getPrefKey(wksp_id),this.getContext().getWorkspaceRef(),undefined,true).then({
            scope:this,
            success: function(){
                this._refreshRequestedPermissions();
            },
            failure: function(error){
                alert(error);
            }
        });

    },
    _refreshRequestedPermissions: function(){
        this.logger.log('_refreshRequestedPermissions');
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        var userid = this.getContext().getUser().ObjectID;
   //     var project = this.getContext().getProjectRef();
        user_pref_key = Rally.technicalservices.TSRequestedPermission.getUserPrefKey(wksp_id,userid);

        var obj = Rally.technicalservices.util.PreferenceSaving.fetchFromJSON(user_pref_key, this.getContext().getWorkspaceRef(),undefined,true).then({
            scope: this,
            success: function(objs){
                var request_keys = objs[0].getKeys();
                var requests = [];
                Ext.Array.each(request_keys, function(key){
                    if (Rally.technicalservices.TSRequestedPermission.isValidPrefKey(key)){
                        requests.push(objs[0].get(key));
                    }
                });
                this.down('#requested_permissions_box').removeAll();
                this._createRequestedPermissionsGrid(requests);
            },
            failure: function(error){
                alert(error);
            }
        });
    },
    _getGridWidth: function(){
      //Set to just less than document.width
        return this.getWidth() - 100;
    },
    _createRequestedPermissionsStore: function(data){
        var store = Ext.create('Rally.data.custom.Store',{
            model: 'Rally.technicalservices.TSRequestedPermission',
            limit: 'infinity',
            data: data
        });
        return store;
    },
    _createRequestedPermissionsGrid: function(data){
        
        var store = this._createRequestedPermissionsStore(data);
        this.down('#requested_permissions_box').add({
            xtype: 'rallygrid',
            itemId: 'requested-permissions-grid',
            store: store,
            width: this._getGridWidth(), 
            emptyText: this._getNoRequestedPermissionsMessage(),
            showPagingToolbar: false,
            title: this._getRequestedPermissionsTitle(),
            columnCfgs: this._getRequestedPermissionColumns(),
            pagingToolbarCfg: {
                store: store
            }
        });
    },
    _getNoRequestedPermissionsMessage: function(){
        return 'No pending permission requests found for ' + this.getContext().getUser().UserName;
    },
    _getRequestedPermissionsTitle: function(){
        return 'Pending Permission Requests for ' + this.getContext().getUser().UserName;
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'user-permissions-provisioning'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
.cls-error{
    color: #FF0000
}
.request-button {
    text-align: center;
    color: #000000;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
}

    </style>

</head>
<body></body>
</html>