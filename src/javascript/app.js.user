Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    PREF_NAME: 'permissions.provisioning.projecttree',
    USER_PREF_PREFIX: 'permissions.provisioning.user.',
    filter_string: '',
    items: [
        {xtype: 'container', itemId: 'requested_permissions_box', layout: 'vbox', padding: 10},
        {xtype: 'container', itemId: 'display_box', padding: 10},
        {xtype: 'container', itemId: 'search_box', layout: 'hbox'},
        {xtype: 'container', itemId: 'search_results_box'},
        {xtype: 'tsinfolink'}
    ],
    launch: function() {
        //Get the project tree.  If we don't have this, then this app is useless!  
        var me = this;
        this.setLoading({msg: 'Loading Project Tree...'});
        Rally.technicalservices.util.PreferenceSaving.fetchFromJSON(this._getPrefName(), this.getContext().getWorkspaceRef()).then({
            scope: this, 
            success: this._addAppComponents,
            failure: this._notifyUserOfError
        }).always(function(){
            me.setLoading(false);
        });
    },
    _getPrefName: function(){
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        return wksp_id.toString() + this.PREF_NAME;  
    },
    _getUserPrefName: function(){
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        return wksp_id.toString() + this.USER_PREF_PREFIX;  
    },
    _addAppComponents: function(obj){
        //TODO: Handle the case where there is no project tree.  
        this.logger.log('_addAppComponents', obj);
        var tree_obj = obj[0].get(this._getPrefName());
        var last_updated = obj[1].get(this._getPrefName());
        this.logger.log('_addAppComponents',obj, tree_obj,last_updated);
        
        
        //Create the internal project tree that we will search  
        this.project_selector = this._createTreeStore(this._getProjectTreeModelFields(),'TSProjectTreeStore',tree_obj);
        
        this._refreshRequestedPermissions(); // creates the grid where we will display the permissions requested by the user
        
        var html ='To request permissions, search for the project (by Project Name or Project Owner) for which you would like permissions and request either Viewer, Editor or Administrator permissions.';
        if (this.down('#text-area-project-tree-status')){
            this.down('#text-area-project-tree-status').destroy();
        }
        var status =  this.down('#display_box').add({
            itemId: 'text-area-project-tree-status',
            xtype: 'container',
            html: html
        });
        var me = this; 
        if (last_updated){
            html = html + '\n\nThe available project list was last updated on ' + last_updated + '.';
            this._createSearchBox();  //Sets up the components for searching by project name or owner
        } else {
            html = 'The project tree has not yet been created.  Please contact your Rally Administrator to generate the list of available projects.';
            var cls = 'cls-error';
            status.addCls(cls); 
        }
        status.update(html);
        

    },
    _createSearchResults: function(results){
        this.down('#search_results_box').removeAll();
        
        var store = Ext.create('Ext.data.Store',{
            fields: ['projectpath','projectid','owner'],
            //limit: 'infinity',
            pageSize: 10,
            data: results
        });
        this.down('#search_results_box').add({
            xtype: 'rallygrid',
            itemId: 'search-results-grid',
            store: store,
          //  selType: 'rowmodel',
          //  plugins: this._getPlugins(),
            width: this._getGridWidth(),  //Set to just less than document.width
            columnCfgs: this._getSearchResultsColumns(),
            showPagingToolbar: false //This needs to be off since its local data
        });
    },
    _getSearchResultsColumns: function(){
        this.logger.log('_getSearchResultsColumns');
        var me = this;
        var permission_types = ['Viewer','Editor','Admin'];
        var columns = [{
                text:'Project Path', 
                dataIndex:'projectpath', 
                flex: 1
        },{
            text:'Project Owner', 
            dataIndex:'owner', 
        },{
            text: 'Team Member?',
            dataIndex: 'team_member',
            xtype: 'checkcolumn'    
        },{
            width: 75,   
            renderer: function (v, m, rec, row, col) {
                var id = Ext.id();
                Ext.defer(function () {
                    Ext.widget('button', {
                        renderTo: id,
                        text: 'Viewer',
                        scope: this,
                        cls: 'request-button',
                        handler: function () {
                            me._addRequestedPermission(rec, row, 'Viewer', me);
                        }
                    });
                }, 50, this);
            return Ext.String.format('<div id="{0}"></div>', id);
            }
        },{
            width: 75,    
            renderer: function (v, m, rec, row, col) {
                    var id = Ext.id();
                    Ext.defer(function () {
                        Ext.widget('button', {
                            renderTo: id,
                            text: 'Editor',
                            scope: this,
                            cls: 'request-button',
                            handler: function () {
                                me._addRequestedPermission(rec, row, 'Editor', me);
                            }
                        });
                    }, 50, this);
                return Ext.String.format('<div id="{0}"></div>', id);
                }
        },{
            width: 75,    
                    renderer: function (v, m, rec, row, col) {
                        var id = Ext.id();
                        Ext.defer(function () {
                            Ext.widget('button', {
                                renderTo: id,
                                text: 'Admin',
                                scope: this,
                                cls: 'request-button',
                                handler: function () {
                                    me._addRequestedPermission(rec, row, 'Admin', me);
                                }
                            });
                        }, 50, this);
                    return Ext.String.format('<div id="{0}"></div>', id);
                    }
                }];
        return columns;        
    },

    _addRequestedPermission: function(rec, row,type, me){
        me.logger.log('_addRequestedPermission', row, type);
        rec.get('team_member')
        var user = this.getContext().getUser();
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        var project = this.getContext().getProjectRef();
        var permission = Ext.create('Rally.technicalservices.TSRequestedPermission');
        permission.set('projectid',rec.get('projectid'));
        permission.set('projectpath',rec.get('projectpath'))
        permission.set('userid',user.ObjectID);
        permission.set('username',user.UserName);
        permission.set('permission',type);
        permission.set('team_member', rec.get('team_member'));
        Rally.technicalservices.util.PreferenceSaving.saveAsJSON(permission.getPrefKey(wksp_id), permission.getPrefValue(), me.getContext().getWorkspaceRef(),undefined,true).then({
            scope: this,
            success: function(){
                Rally.ui.notify.Notifier.show({message: type + ' permission submitted for ' + user.UserName + ' for project' + rec.get('projectpath')});
                me._refreshRequestedPermissions();
            },
            failure: function(error){
                me._notifyUserOfError(error);
            }
        });
    },
    _nofityUserOfError: function(error){
        Rally.ui.notify.Notifier.showError({message: error});
    },
    /* 
     * ProjectSelector:  The following functions are specific to the tree for searching for a project
     */
    _getProjectTreeModelFields: function(){
        return [
            {name: 'Name', type: 'String'},
            {name: 'Owner', type: 'String'}
        ];
    },
    _generateTypeAheadStore: function(search_field){
        this.logger.log('_generateTypeAheadStore', search_field);
        //generate an array of all project names
        var search_terms = [];
        var project_count = 0;
        this.project_selector.getRootNode().cascadeBy(function(nd){
            project_count++;
            var val = nd.get(search_field);
            if (val.length > 1 && !Ext.Array.contains(search_terms, val)){
                search_terms.push(val);
                var tokens = val.match(/\S+/g);
                if (tokens.length > 1){
                    search_terms = _.union(search_terms,tokens);
                }
            }
            search_terms.sort();
        });
        this.logger.log('_generateTypeAheadStore END', project_count);
        return search_terms;
    },
    _createTreeStore: function(model_fields, model_name, children){
        var model = {
                extend: 'Ext.data.Model',
                fields: model_fields
            };
        Ext.define(model_name, model);        
        
        var tree_store = Ext.create('Ext.data.TreeStore',{
            model: model_name,
            root: {
                expanded: false,
                children: children
                }
        });
        return tree_store;
    },

    _searchTree: function(){
        var search_field = this.down('#search-by-combo').getValue();
        var search_term = this.down('#search-combo').getValue();
        var root = this.project_selector.getRootNode();
        var search_regex = new RegExp(search_term,'gi');
        search_results = []; 
        root.cascadeBy(function(n){
            var match_term = n.get(search_field); 
            if (search_field == 'Name'){
                match_term = n.getPath(search_field)
            }
            if (match_term.match(search_regex)){
                var result = {};
                result['projectpath'] = n.getPath('Name');
                result['projectid'] = n.get('id');
                result['owner'] = n.get('Owner');
                search_results.push(result);
            }
            return true;
        });
        this._createSearchResults(search_results);
    },
    _addSearchWidgets: function(cb){
        var search_field = cb.getValue();
        var type_ahead_store = this._generateTypeAheadStore(search_field);
        
        if (this.down('#search-combo')){this.down('#search-combo').destroy();}
        if (this.down('#search-button')){this.down('#search-button').destroy();}

        this.down('#search_box').add({
            xtype: 'combobox',
            itemId: 'search-combo',
            typeAhead: true,
            store: type_ahead_store,
            hideTrigger: true,
            enableKeyEvents: true,
            margin: 10,
            minChars: 2,
            width: 300
        });
        this.down('#search_box').add({
            xtype: 'button',
            itemId: 'search-button',
            text: 'Search',
            margin: 10,
            scope: this,
            handler: this._searchTree
        });
    },
    _createSearchBox: function(){
        this.logger.log ('_createSearchBox');
        var search_store = Ext.create('Ext.data.Store', {
            fields: ['display','field_name'],
            data: [{display:'Project Name', field_name:'Name'},
                   {display:'Owner Name or Email', field_name:'Owner'}]  //TODO if we want to search by otherfields, this is where we will set that up.  

        });        
        
        this.down('#search_box').add({
            xtype: 'combobox',
            itemId: 'search-by-combo',
            store: search_store,
            displayField: 'display',
            valueField: 'field_name',
            margin: 10,
            labelAlign: 'right',
            fieldLabel: 'Search By',
            forceSelection: true,
            listeners: {
                scope: this,
                change: function(cb) {
                    this._addSearchWidgets(cb);
                }
            }
        });
        this.down('#search-by-combo').setValue('Name');
    },
    /*
     * RequestedPermissions:  The following functions are specific to the tree for requested permissions
     */
    _getRequestedPermissionColumns: function(){
        this.logger.log('_getRequestedPermissionColumns');

        var columns = [
            { //Project Path 
                text: 'Project Path',
                dataIndex: 'projectpath',
                flex: 1
            },
            { //Requested Permission
                text: 'Requested Permission',
                dataIndex: 'permission',
            },{ //Team Member (True or False)
                text: 'Team Member?',
                dataIndex: 'team_member',
                renderer: function(v){
                    if (v) {
                        return 'Yes';
                    }
                    return 'No';
                }
            },{ //Action Column
                xtype:'actioncolumn',
                items: [{
                    icon: '/slm/images/icon_delete.gif',
                    tooltip: 'Delete',
                    scope: this,
                    handler: this._deleteRequestedPermission
                }]
            }]
        return columns;        
    },
    _deleteRequestedPermission: function(grid,row,col){
        var perm = grid.getStore().getAt(row);
        var wksp_id = this.getContext().getWorkspace().ObjectID;
       // var project_ref = this.getContext().getProjectRef();
        this.logger.log('_deleteRequestedPermission:', perm);
        Rally.technicalservices.util.PreferenceSaving._cleanPrefs(perm.getPrefKey(wksp_id),this.getContext().getWorkspaceRef(),undefined,true).then({
            scope:this,
            success: function(){
                this._refreshRequestedPermissions();
            },
            failure: function(error){
                alert(error);
            }
        });

    },
    _refreshRequestedPermissions: function(){
        this.logger.log('_refreshRequestedPermissions');
        var wksp_id = this.getContext().getWorkspace().ObjectID;
        var userid = this.getContext().getUser().ObjectID;
   //     var project = this.getContext().getProjectRef();
        user_pref_key = Rally.technicalservices.TSRequestedPermission.getUserPrefKey(wksp_id,userid);

        var obj = Rally.technicalservices.util.PreferenceSaving.fetchFromJSON(user_pref_key, this.getContext().getWorkspaceRef(),undefined,true).then({
            scope: this,
            success: function(objs){
                var request_keys = objs[0].getKeys();
                var requests = [];
                Ext.Array.each(request_keys, function(key){
                    if (Rally.technicalservices.TSRequestedPermission.isValidPrefKey(key)){
                        requests.push(objs[0].get(key));
                    }
                });
                this.down('#requested_permissions_box').removeAll();
                this._createRequestedPermissionsGrid(requests);
            },
            failure: function(error){
                alert(error);
            }
        });
    },
    _getGridWidth: function(){
      //Set to just less than document.width
        return this.getWidth() - 100;
    },
    _createRequestedPermissionsStore: function(data){
        var store = Ext.create('Rally.data.custom.Store',{
            model: 'Rally.technicalservices.TSRequestedPermission',
            limit: 'infinity',
            data: data
        });
        return store;
    },
    _createRequestedPermissionsGrid: function(data){
        
        var store = this._createRequestedPermissionsStore(data);
        this.down('#requested_permissions_box').add({
            xtype: 'rallygrid',
            itemId: 'requested-permissions-grid',
            store: store,
            width: this._getGridWidth(), 
            emptyText: this._getNoRequestedPermissionsMessage(),
            showPagingToolbar: false,
            title: this._getRequestedPermissionsTitle(),
            columnCfgs: this._getRequestedPermissionColumns(),
            pagingToolbarCfg: {
                store: store
            }
        });
    },
    _getNoRequestedPermissionsMessage: function(){
        return 'No pending permission requests found for ' + this.getContext().getUser().UserName;
    },
    _getRequestedPermissionsTitle: function(){
        return 'Pending Permission Requests for ' + this.getContext().getUser().UserName;
    }
});